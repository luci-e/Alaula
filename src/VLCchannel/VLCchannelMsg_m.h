//
// Generated file, do not edit! Created by nedtool 4.6 from src/VLCchannel/VLCchannelMsg.msg.
//

#ifndef _VLCCHANNELMSG_M_H_
#define _VLCCHANNELMSG_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/VLCchannel/VLCchannelMsg.msg:16</tt> by nedtool.
 * <pre>
 * message VLCchannelMsg
 * {
 *     int messageType;
 * }
 * </pre>
 */
class VLCchannelMsg : public ::cMessage
{
  protected:
    int messageType_var;

  private:
    void copy(const VLCchannelMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VLCchannelMsg&);

  public:
    VLCchannelMsg(const char *name=NULL, int kind=0);
    VLCchannelMsg(const VLCchannelMsg& other);
    virtual ~VLCchannelMsg();
    VLCchannelMsg& operator=(const VLCchannelMsg& other);
    virtual VLCchannelMsg *dup() const {return new VLCchannelMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getMessageType() const;
    virtual void setMessageType(int messageType);
};

inline void doPacking(cCommBuffer *b, VLCchannelMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VLCchannelMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/VLCchannel/VLCchannelMsg.msg:23</tt> by nedtool.
 * <pre>
 * // A move message indicates that either the tx or rx has altered 
 * // its position or orientation in space.
 * message VLCmoveMsg extends VLCchannelMsg
 * {
 *     int nodeId;
 * }
 * </pre>
 */
class VLCmoveMsg : public ::VLCchannelMsg
{
  protected:
    int nodeId_var;

  private:
    void copy(const VLCmoveMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VLCmoveMsg&);

  public:
    VLCmoveMsg(const char *name=NULL, int kind=0);
    VLCmoveMsg(const VLCmoveMsg& other);
    virtual ~VLCmoveMsg();
    VLCmoveMsg& operator=(const VLCmoveMsg& other);
    virtual VLCmoveMsg *dup() const {return new VLCmoveMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getNodeId() const;
    virtual void setNodeId(int nodeId);
};

inline void doPacking(cCommBuffer *b, VLCmoveMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VLCmoveMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/VLCchannel/VLCchannelMsg.msg:27</tt> by nedtool.
 * <pre>
 * message VLCchannelSignalBegin extends VLCchannelMsg
 * {
 *     int transmitterNodeId;
 *     double power;
 *     double carrierFreq;
 *     int modulationType;
 * }
 * </pre>
 */
class VLCchannelSignalBegin : public ::VLCchannelMsg
{
  protected:
    int transmitterNodeId_var;
    double power_var;
    double carrierFreq_var;
    int modulationType_var;

  private:
    void copy(const VLCchannelSignalBegin& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VLCchannelSignalBegin&);

  public:
    VLCchannelSignalBegin(const char *name=NULL, int kind=0);
    VLCchannelSignalBegin(const VLCchannelSignalBegin& other);
    virtual ~VLCchannelSignalBegin();
    VLCchannelSignalBegin& operator=(const VLCchannelSignalBegin& other);
    virtual VLCchannelSignalBegin *dup() const {return new VLCchannelSignalBegin(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getTransmitterNodeId() const;
    virtual void setTransmitterNodeId(int transmitterNodeId);
    virtual double getPower() const;
    virtual void setPower(double power);
    virtual double getCarrierFreq() const;
    virtual void setCarrierFreq(double carrierFreq);
    virtual int getModulationType() const;
    virtual void setModulationType(int modulationType);
};

inline void doPacking(cCommBuffer *b, VLCchannelSignalBegin& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VLCchannelSignalBegin& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/VLCchannel/VLCchannelMsg.msg:34</tt> by nedtool.
 * <pre>
 * message VLCchannelSignalEnd extends VLCchannelMsg
 * {
 *     int transmitterNodeId;
 * }
 * </pre>
 */
class VLCchannelSignalEnd : public ::VLCchannelMsg
{
  protected:
    int transmitterNodeId_var;

  private:
    void copy(const VLCchannelSignalEnd& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VLCchannelSignalEnd&);

  public:
    VLCchannelSignalEnd(const char *name=NULL, int kind=0);
    VLCchannelSignalEnd(const VLCchannelSignalEnd& other);
    virtual ~VLCchannelSignalEnd();
    VLCchannelSignalEnd& operator=(const VLCchannelSignalEnd& other);
    virtual VLCchannelSignalEnd *dup() const {return new VLCchannelSignalEnd(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getTransmitterNodeId() const;
    virtual void setTransmitterNodeId(int transmitterNodeId);
};

inline void doPacking(cCommBuffer *b, VLCchannelSignalEnd& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VLCchannelSignalEnd& obj) {obj.parsimUnpack(b);}


#endif // ifndef _VLCCHANNELMSG_M_H_

